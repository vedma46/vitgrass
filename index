<!DOCTYPE html>
<html lang="ru">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Витграсс-ферма (HTML)</title>
<style>
  :root{
    --bg-top:#ebf6ef; --bg-bottom:#d6ebdd;
    --white:#fff; --grey:#d2d7d7; --black:#1e1e1e;
    --green:#4eac60; --orange:#e68c46; --mint:#bee6c8;
    --brown:#966e50; --darkbrown:#78543c; --blue:#5082c8;
  }
  *{box-sizing:border-box}
  html,body{height:100%;margin:0;background:linear-gradient(180deg,var(--bg-top),var(--bg-bottom));color:var(--black);font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif}
  #app{display:flex;gap:12px;height:100%;padding:12px;overflow:hidden}
  .left{flex:1;min-width:0;display:flex;flex-direction:column}
  #hint{font-size:12px;line-height:1.2;padding:6px 4px 2px 4px;opacity:.85}
  #gamewrap{position:relative;flex:1;min-height:220px;border-radius:16px;overflow:hidden;box-shadow:0 2px 10px rgba(0,0,0,.06)}
  #game{width:100%;height:100%;display:block;background:transparent}
  .right{width:min(420px,34vw);min-width:300px;max-width:520px;background:var(--white);border:2px solid var(--grey);border-radius:18px;padding:14px;overflow:hidden;display:flex;flex-direction:column}
  #sidebar{overflow:auto;padding-right:8px}
  .title{display:flex;align-items:center;gap:10px;font-weight:700;font-size:22px;margin-bottom:8px}
  .chipbar{display:flex;flex-wrap:wrap;gap:8px;margin:.25rem 0 .5rem}
  .chip{font-size:13px;padding:6px 10px;border-radius:12px;background:var(--white);border:2px solid var(--grey);cursor:pointer;user-select:none}
  .chip.active{background:#b4e1be;border-color:#74b685}
  .toolhdr{display:flex;align-items:center;gap:10px;background:var(--mint);border-radius:10px;padding:8px 10px;margin:6px 0 10px}
  .btn{width:100%;text-align:left;border:2px solid var(--grey);background:var(--white);border-radius:12px;padding:10px 12px;margin:8px 0;cursor:pointer}
  .btn:hover{background:#fafafa}
  .row{display:flex;align-items:flex-start;gap:8px;margin:6px 0}
  .kv{font-size:15px;line-height:1.25}
  .q{font-size:13px;margin:2px 0}
  .q.done{color:var(--green);font-weight:600}
  .icon{width:22px;height:22px;display:inline-block;vertical-align:middle}
  @media (max-width:900px){ .right{width:38vw;min-width:260px}.title{font-size:20px} }
  @media (max-width:700px){ #app{flex-direction:column}.right{width:100%;max-height:46vh} }
</style>
</head>
<body>
<div id="app">
  <div class="left">
    <div id="hint">1: Семена • 2: Лейка • 3: Ножницы • 4: Удобрение | Магазин справа → (S/L — сейв/лоад, R — новая игра)</div>
    <div id="gamewrap"><canvas id="game"></canvas></div>
  </div>
  <aside class="right">
    <div id="sidebar">
      <div class="title"><span class="icon" id="icon-seed"></span><span>Витграсс Ферма</span></div>
      <div id="stats"></div>
      <div class="toolhdr"><span class="icon" id="tool-ico"></span><span id="tool-name"></span></div>
      <div id="seedSelector" class="chipbar" aria-label="Виды семян"></div>
      <div id="shop"></div>
      <div class="quests">
        <h4 style="margin:.5rem 0 .25rem;font-size:16px">Ежедневные квесты</h4>
        <div id="quests"></div>
        <div id="qdate" style="font-size:12px;color:#96a0a0;margin-top:4px"></div>
      </div>
    </div>
  </aside>
</div>

<script>
/* ---------- constants ---------- */
const JUICE_PRICE=6, LAMP_PRICE=40, LAMP_GROWTH_BONUS=0.10;
const AUTOWATER_PRICE=120, AUTOWATER_TICK=5.0, AUTOWATER_AMOUNT=0.18;
const TOOL_SEED=1, TOOL_WATER=2, TOOL_HARVEST=3, TOOL_FERT=4;
const SEEDED=0, SPROUT=1, GROWTH=2, MATURE=3, OVERGROWN=4;
const STAGE_TIMERS={0:15,1:25,2:35,3:45,4:Infinity};
const SEED_TYPES=[
  {id:"basic",name:"Обычные",pack:5,price:10,speed:1.00,ym:2,yo:1,color:[70,170,80]},
  {id:"fast",name:"Скороспелые",pack:5,price:14,speed:1.35,ym:1,yo:1,color:[90,190,120]},
  {id:"juicy",name:"Сочные",pack:5,price:18,speed:0.95,ym:3,yo:1,color:[60,160,90]},
  {id:"premium",name:"Премиум",pack:3,price:22,speed:0.85,ym:4,yo:2,color:[56,150,86]},
];

/* ---------- state & save ---------- */
const SAVE_KEY="vitgrass_save_v3";
function defaultState(){
  const stock=Object.fromEntries(SEED_TYPES.map(t=>[t.id,0])); stock.basic=6;
  return {
    coins:30, seed_stock:stock, grass:0, juice:0, lamps:0, autowater:false, fert:0,
    stats:{harvests:0,sell_juice:0,waters:0,plants:0},
    quests:[], quests_date:"",
    pots:Array.from({length:12},()=>({has_seed:false,stage:SEEDED,stage_time:0,moisture:0,fert_time_left:0,seed_type:0,cut_flash:0}))
  };
}
let state=defaultState();

function todayKey(){ return new Date().toISOString().slice(0,10); }
function seededRandom(seed){ let x=seed|0; if(x===0)x=123456789; return ()=>{ x^=x<<13; x^=x>>>17; x^=x<<5; return ((x>>>0)%1e9)/1e9; }; }
const QUEST_TEMPLATES=[["Собери витграсс",10,"harvests",40],["Продай стаканы сока",6,"sell_juice",36],["Полей горшки",18,"waters",20],["Посади семена",12,"plants",24]];
function genDaily(){ const d=todayKey().replaceAll("-",""); const rnd=seededRandom(parseInt(d,10)||20250101); const pool=[...QUEST_TEMPLATES]; const pick=[]; while(pick.length<3&&pool.length){ pick.push(pool.splice(Math.floor(rnd()*pool.length),1)[0]); } return pick.map(([n,need,k,rw])=>({name:n,need,key:k,done:0,reward:rw,claimed:false})); }
function ensureDaily(s){ if(s.quests_date!==todayKey()){ s.quests=genDaily(); s.quests_date=todayKey(); } }
function questEvent(s,kind){ for(const q of s.quests){ if(q.key===kind && !q.claimed){ q.done=Math.min(q.need,q.done+1); if(q.done>=q.need){ q.claimed=true; s.coins+=q.reward; SFX.buy(); } } } }

function saveState(){ try{ localStorage.setItem(SAVE_KEY,JSON.stringify(state)); document.title="Сохранено ✓ — Витграсс-ферма"; setTimeout(()=>document.title="Витграсс-ферма (HTML)",900); }catch(e){ console.warn("Save error",e); } }
function loadState(){
  try{
    const raw=localStorage.getItem(SAVE_KEY); if(!raw) return false;
    const data=JSON.parse(raw);
    for(const t of SEED_TYPES){ if(!(t.id in data.seed_stock)) data.seed_stock[t.id]=0; }
    if(!Array.isArray(data.pots)||data.pots.length!==12) data.pots=defaultState().pots;
    state={...defaultState(),...data}; ensureDaily(state);
    document.title="Загружено ✓ — Витграсс-ферма"; setTimeout(()=>document.title="Витграсс-ферма (HTML)",900);
    return true;
  }catch(e){ console.warn("Load error",e); return false; }
}
function resetGame(){ state=defaultState(); ensureDaily(state); try{localStorage.removeItem(SAVE_KEY);}catch{}; document.title="Новая игра — прогресс сброшен"; setTimeout(()=>document.title="Витграсс-ферма (HTML)",900); }

/* ---------- audio ---------- */
let audioCtx=null; function ensureAudio(){ if(!audioCtx){ audioCtx=new (window.AudioContext||window.webkitAudioContext)(); } }
function beep(freq=880,sec=.12,vol=.35){ ensureAudio(); const t0=audioCtx.currentTime; const osc=audioCtx.createOscillator(); const g=audioCtx.createGain(); osc.type="sine"; osc.frequency.value=freq; g.gain.setValueAtTime(0,t0); g.gain.linearRampToValueAtTime(vol,t0+.01); g.gain.exponentialRampToValueAtTime(0.0001,t0+sec); osc.connect(g).connect(audioCtx.destination); osc.start(t0); osc.stop(t0+sec+.02); }
const SFX={ plant:()=>beep(660,.09,.28), water:()=>beep(520,.11,.25), harv:()=>beep(920,.12,.32), buy:()=>beep(480,.09,.25), err:()=>beep(220,.16,.28) };

/* ---------- canvas/layout ---------- */
const canvas=document.getElementById("game"); const wrap=document.getElementById("gamewrap"); const ctx=canvas.getContext("2d");
let DPR = (window.devicePixelRatio||1);
let layout={w:1200,h:720,margin:16,cols:3,rows:4,potW:120,potH:120,gapX:18,gapY:22,offsetX:0,offsetY:0,gridLeft:0,gridTop:0,gridW:0,gridH:0};
let potRects=Array.from({length:12},()=>({x:0,y:0,w:0,h:0}));
let cachedLeaf=null;

function resizeCanvas(){
  try{
    DPR=(window.devicePixelRatio||1);
    const w=wrap.clientWidth||800, h=wrap.clientHeight||500;
    canvas.width = Math.max(1, Math.floor(w*DPR));
    canvas.height= Math.max(1, Math.floor(h*DPR));
    canvas.style.width=w+"px"; canvas.style.height=h+"px";
    ctx.setTransform(DPR,0,0,DPR,0,0);
    rebuildLayout(w,h);
    if(!cachedLeaf) cachedLeaf=makeLeaf(Math.max(18,Math.floor(Math.min(w,h)*0.02)));
  }catch(e){ console.error("resizeCanvas error",e); }
}
function rebuildLayout(w,h){
  layout.w=w; layout.h=h;
  layout.margin=Math.max(12,Math.floor(w*0.014));
  layout.gridLeft=layout.margin; layout.gridTop=Math.floor(layout.margin*1.4);
  layout.gridW=w-layout.margin*2; layout.gridH=h-layout.gridTop-Math.floor(layout.margin*0.8);
  let best=null;
  for(let cols=2; cols<=5; cols++){
    const rows=Math.ceil(12/cols);
    const gapX=Math.max(10,Math.floor(layout.gridW*0.018));
    const gapY=Math.max(12,Math.floor(layout.gridH*0.03));
    const potW=Math.floor((layout.gridW-gapX*(cols-1))/cols);
    const potH=Math.floor((layout.gridH-gapY*(rows-1))/rows);
    const size=Math.min(potW,potH);
    if(size<80) continue;
    if(!best||size>best.size) best={size,cols,rows,gapX,gapY};
  }
  let size,cols,rows,gapX,gapY;
  if(!best){
    cols=2; rows=Math.ceil(12/cols);
    gapX=Math.max(8,Math.floor(layout.gridW*0.015));
    gapY=Math.max(10,Math.floor(layout.gridH*0.025));
    size=Math.max(60,Math.min(Math.floor((layout.gridW-gapX*(cols-1))/cols),Math.floor((layout.gridH-gapY*(rows-1))/rows)));
  }else ({size,cols,rows,gapX,gapY}=best);
  layout.cols=cols; layout.rows=rows; layout.potW=layout.potH=size; layout.gapX=gapX; layout.gapY=gapY;
  const totalW=size*cols+gapX*(cols-1), totalH=size*rows+gapY*(rows-1);
  layout.offsetX=layout.gridLeft+Math.max(0,Math.floor((layout.gridW-totalW)/2));
  layout.offsetY=layout.gridTop +Math.max(0,Math.floor((layout.gridH-totalH)/2));
  for(let i=0;i<12;i++){
    const r=Math.floor(i/cols), c=i%cols;
    const x=layout.offsetX + c*(size+gapX);
    const y=layout.offsetY + r*(size+gapY);
    potRects[i]={x,y,w:size,h:size};
  }
}
function makeLeaf(px){
  const c=document.createElement("canvas"); c.width=px; c.height=px; const g=c.getContext("2d");
  g.strokeStyle="rgba(20,100,60,0.22)"; g.lineWidth=Math.max(2,px/14);
  g.beginPath(); g.moveTo(px*.5,px*.92); g.lineTo(px*.5,px*.3); g.stroke();
  g.beginPath(); g.ellipse(px*.56,px*.27,px*.14,px*.09,0,0,Math.PI*2); g.stroke();
  g.beginPath(); g.ellipse(px*.40,px*.32,px*.11,px*.07,0,0,Math.PI*2); g.stroke();
  return c;
}
function drawBG(){
  const g=ctx.createLinearGradient(0,0,0,layout.h);
  g.addColorStop(0,"#ebf6ef"); g.addColorStop(1,"#d6ebdd");
  ctx.fillStyle=g; ctx.fillRect(0,0,layout.w,layout.h);
  const leaf=cachedLeaf; if(leaf){
    const stepX=leaf.width+28, stepY=leaf.height+22;
    for(let yy=0; yy<layout.h; yy+=stepY){
      const off=((yy/stepY)|0)%2 ? Math.floor(stepX/2) : 0;
      for(let xx=-off; xx<layout.w; xx+=stepX){ ctx.globalAlpha=0.09; ctx.drawImage(leaf,xx,yy); }
    }
    ctx.globalAlpha=1;
  }
}
function roundRect(x,y,w,h,r,fill,stroke){
  const rr=Math.min(r,w/2,h/2);
  ctx.beginPath();
  ctx.moveTo(x+rr,y);
  ctx.arcTo(x+w,y,x+w,y+h,rr);
  ctx.arcTo(x+w,y+h,x,y+h,rr);
  ctx.arcTo(x,y+h,x,y,rr);
  ctx.arcTo(x,y,x+w,y,rr);
  if(fill){ ctx.fill(); }
  if(stroke){ ctx.stroke(); }
}
function rgb([r,g,b]){ return `rgb(${r},${g},${b})`; }
function tint([r,g,b],k){ return [Math.floor(r*k),Math.floor(g*k),Math.floor(b*k)]; }

function drawShelves(){
  const shelfH=Math.max(10,Math.floor(layout.potH/14));
  const under =Math.max(6, Math.floor(layout.potH/18));
  const totalW=layout.cols*layout.potW + (layout.cols-1)*layout.gapX;
  ctx.fillStyle="#dce6dc";
  for(let r=0;r<layout.rows;r++){
    const y=layout.offsetY + r*(layout.potH+layout.gapY) + layout.potH + under;
    ctx.fillRect(layout.offsetX-12,y,totalW+24,shelfH);
  }
}
function drawPots(){
  for(let i=0;i<12;i++){
    const p=state.pots[i], r=potRects[i];
    ctx.fillStyle="#966e50"; roundRect(r.x,r.y,r.w,r.h,10,true,false);
    ctx.fillStyle="#78543c"; roundRect(r.x,r.y,r.w,Math.max(18,Math.floor(r.h/6)),10,true,false);
    const soil={x:r.x+Math.floor(r.w*.07), y:r.y+Math.floor(r.h*.2), w:r.w-Math.floor(r.w*.14), h:r.h-Math.floor(r.h*.26)};
    ctx.fillStyle="rgb(95,70,55)"; roundRect(soil.x,soil.y,soil.w,soil.h,8,true,false);
    const waterY=r.y+r.h - Math.max(6,Math.floor(r.h/18));
    const mw=Math.floor(soil.w * p.moisture);
    ctx.fillStyle="#5082c8"; roundRect(soil.x,waterY,mw,Math.max(5,Math.floor(r.h/24)),3,true,false);

    if(p.has_seed){
      const st=SEED_TYPES[p.seed_type]; const base=[...st.color];
      const cx=r.x+Math.floor(r.w/2); const baseY=waterY;
      let height,color,blades;
      if(p.stage===SEEDED){ height=Math.max(10,Math.floor(r.h/9)); color=tint(base,0.95); blades=2; }
      else if(p.stage===SPROUT){ height=Math.max(22,Math.floor(r.h/4)); color=base; blades=5; }
      else if(p.stage===GROWTH){ height=Math.max(38,Math.floor(r.h/2.7)); color=tint(base,0.95); blades=8; }
      else if(p.stage===MATURE){ height=Math.max(56,Math.floor(r.h/2)); color=base; blades=9; }
      else { height=Math.max(50,Math.floor(r.h/2.3)); color=tint(base,0.75); blades=9; }
      const step=Math.max(4,Math.floor(r.w/18));
      ctx.strokeStyle=rgb(color); ctx.lineWidth=Math.max(2,Math.floor(r.w/60));
      for(let k=0;k<blades;k++){
        const x=cx + (k-(blades/2|0))*step;
        const wob=Math.sin((performance.now()/270)+k)*2;
        ctx.beginPath(); ctx.moveTo(x,baseY); ctx.lineTo(x,baseY - height - ((k%3)*2) + wob); ctx.stroke();
      }
      const badgeR=Math.max(10,Math.floor(r.w/10));
      if(p.stage===MATURE){
        ctx.fillStyle="#4eac60"; ctx.beginPath(); ctx.arc(r.x+r.w-badgeR, r.y+badgeR, badgeR, 0, Math.PI*2); ctx.fill();
        ctx.strokeStyle="#fff"; ctx.lineWidth=Math.max(2,badgeR*.12); ctx.beginPath(); ctx.moveTo(r.x+r.w-badgeR*1.35, r.y+badgeR); ctx.lineTo(r.x+r.w-badgeR*1.05, r.y+badgeR*1.28); ctx.lineTo(r.x+r.w-badgeR*.64, r.y+badgeR*.66); ctx.stroke();
      }else if(p.stage===OVERGROWN){
        ctx.fillStyle="#e68c46"; ctx.beginPath(); ctx.arc(r.x+r.w-badgeR, r.y+badgeR, badgeR, 0, Math.PI*2); ctx.fill();
        ctx.fillStyle="#fff"; ctx.fillRect(r.x+r.w-badgeR*0.08 - badgeR*0.08, r.y+badgeR*0.08 - badgeR*0.5, badgeR*0.16, badgeR*0.5);
        ctx.beginPath(); ctx.arc(r.x+r.w-badgeR*0.0, r.y+badgeR*0.9, badgeR*0.09, 0, Math.PI*2); ctx.fill();
      }
    }
    if(p.cut_flash>0){ ctx.globalAlpha=Math.min(1,(p.cut_flash/0.18)*0.6); ctx.fillStyle="#fff"; ctx.fillRect(r.x,r.y,r.w,r.h); ctx.globalAlpha=1; }
    ctx.strokeStyle="rgba(0,0,0,0.1)"; ctx.lineWidth=2; roundRect(r.x,r.y,r.w,r.h,10,false,true);
  }
}

/* ---------- game loop ---------- */
let activeTool=TOOL_SEED, activeSeedIdx=0, autowaterTimer=0;
function sumSeeds(stock){ return SEED_TYPES.reduce((a,t)=>a+(stock[t.id]||0),0); }
function potSpeed(p){ const st=SEED_TYPES[p.seed_type]; return st.speed * (1+state.lamps*LAMP_GROWTH_BONUS) * (1+p.moisture) * (p.fert_time_left>0?1.35:1); }
function update(dt){
  ensureDaily(state);
  if(state.autowater){ autowaterTimer+=dt; if(autowaterTimer>=AUTOWATER_TICK){ autowaterTimer=0; for(const p of state.pots) if(p.has_seed) p.moisture=Math.min(1,p.moisture+AUTOWATER_AMOUNT); } }
  for(const p of state.pots){
    p.moisture=Math.max(0,p.moisture - dt*0.02);
    if(p.fert_time_left>0) p.fert_time_left=Math.max(0,p.fert_time_left-dt);
    if(p.cut_flash>0) p.cut_flash=Math.max(0,p.cut_flash-dt);
    if(!p.has_seed) continue;
    p.stage_time+=dt*potSpeed(p);
    const target=STAGE_TIMERS[p.stage];
    if(p.stage===SEEDED||p.stage===SPROUT||p.stage===GROWTH){ if(p.stage_time>=target){ p.stage+=1; p.stage_time=0; } }
    else if(p.stage===MATURE && p.stage_time>=target){ p.stage=OVERGROWN; p.stage_time=0; }
  }
}
let last=performance.now();
function loop(now){
  const dt=Math.min(.1,(now-last)/1000); last=now;
  update(dt);
  drawBG();
  drawShelves();
  drawPots();
  requestAnimationFrame(loop);
}

/* ---------- input ---------- */
canvas.addEventListener("pointerdown",(e)=>{
  ensureAudio();
  const rect=canvas.getBoundingClientRect();
  const mx=e.clientX-rect.left, my=e.clientY-rect.top;
  for(let i=0;i<12;i++){
    const r=potRects[i]; if(mx>=r.x&&mx<=r.x+r.w&&my>=r.y&&my<=r.y+r.h){
      const p=state.pots[i];
      if(activeTool===TOOL_SEED){
        const sid=SEED_TYPES[activeSeedIdx].id;
        if(!p.has_seed && state.seed_stock[sid]>0){
          p.has_seed=true; p.seed_type=activeSeedIdx; p.stage=SEEDED; p.stage_time=0; p.moisture=.4; p.cut_flash=0;
          state.seed_stock[sid]--; state.stats.plants=(state.stats.plants||0)+1; questEvent(state,"plants"); SFX.plant();
          refreshSidebar(false);
        }else SFX.err();
      }else if(activeTool===TOOL_WATER){
        if(p.has_seed){ p.moisture=Math.min(1,p.moisture+.6); state.stats.waters=(state.stats.waters||0)+1; questEvent(state,"waters"); SFX.water(); }
        else SFX.err();
      }else if(activeTool===TOOL_HARVEST){
        if(p.stage===MATURE || p.stage===OVERGROWN){
          const st=SEED_TYPES[p.seed_type]; const got=(p.stage===MATURE?st.ym:st.yo)|0;
          p.has_seed=false; p.stage=SEEDED; p.stage_time=0; p.moisture=0; p.fert_time_left=0; p.cut_flash=.18;
          if(got>0){ state.grass+=got; state.stats.harvests=(state.stats.harvests||0)+1; questEvent(state,"harvests"); SFX.harv(); refreshSidebar(false); }
        }else SFX.err();
      }else if(activeTool===TOOL_FERT){
        if(p.has_seed && state.fert>0){ p.fert_time_left+=120; state.fert--; SFX.buy(); refreshSidebar(false); }
        else SFX.err();
      }
      break;
    }
  }
});
window.addEventListener("keydown",(e)=>{
  if(e.key==="1") activeTool=TOOL_SEED;
  else if(e.key==="2") activeTool=TOOL_WATER;
  else if(e.key==="3") activeTool=TOOL_HARVEST;
  else if(e.key==="4") activeTool=TOOL_FERT;
  else if(e.key==="ArrowLeft" && activeTool===TOOL_SEED){ activeSeedIdx=(activeSeedIdx-1+SEED_TYPES.length)%SEED_TYPES.length; }
  else if(e.key==="ArrowRight" && activeTool===TOOL_SEED){ activeSeedIdx=(activeSeedIdx+1)%SEED_TYPES.length; }
  else if(e.key.toLowerCase()==="s"){ saveState(); }
  else if(e.key.toLowerCase()==="l"){ if(loadState()) refreshSidebar(true); }
  else if(e.key.toLowerCase()==="r"){ resetGame(); refreshSidebar(true); }
  else if(e.key==="Escape"){ saveState(); }
  refreshSidebar(false);
});

/* ---------- sidebar ---------- */
const statsDiv=document.getElementById("stats");
const toolIco=document.getElementById("tool-ico");
const toolName=document.getElementById("tool-name");
const seedSel=document.getElementById("seedSelector");
const shopDiv=document.getElementById("shop");
const questsDiv=document.getElementById("quests");
const qdateDiv=document.getElementById("qdate");

function svg(path){ const s=document.createElement("span"); s.className="icon"; s.innerHTML=`<svg viewBox="0 0 24 24" width="22" height="22" fill="none" stroke="currentColor" stroke-width="2">${path}</svg>`; return s; }
const ICONS={
  seed:svg(`<path d="M12 22V7"/><ellipse cx="14" cy="6" rx="3" ry="2"/><ellipse cx="9" cy="8" rx="2.2" ry="1.4"/>`),
  water:svg(`<path d="M12 3 L17 13 L12 21 L7 13 Z"/>`),
  scissors:svg(`<circle cx="9" cy="15" r="2.5"/><circle cx="15" cy="15" r="2.5"/><path d="M10 13 L16.5 6"/><path d="M14 13 L7.5 6"/>`),
  fert:svg(`<rect x="8" y="6" width="8" height="12" rx="2"/><path d="M12 4 L14 6"/>`),
  lamp:svg(`<circle cx="12" cy="9" r="4.5"/><rect x="10" y="14" width="4" height="4" rx="1"/>`),
  coin:svg(`<ellipse cx="12" cy="14" rx="6" ry="3.6"/>`),
  juice:svg(`<rect x="9" y="5" width="6" height="12" rx="1.5"/><path d="M15 5 L18 3"/>`),
  save:svg(`<rect x="6" y="6" width="12" height="12" rx="2"/><rect x="8.5" y="8" width="7" height="4" rx="1"/>`),
  reset:svg(`<path d="M7 7 A7 7 0 1 0 17 12"/><path d="M17 6 L17 11 L12 11"/>`),
};
document.getElementById("icon-seed").replaceWith(ICONS.seed.cloneNode(true));

function refreshSidebar(rebuildChips=true){
  const totalSeeds=sumSeeds(state.seed_stock);
  statsDiv.innerHTML = `
    <div class="row kv">${ICONS.coin.outerHTML}<div>Монеты: <b>${state.coins}</b></div></div>
    <div class="row kv">${ICONS.seed.outerHTML}<div>Семена: <b>${totalSeeds}</b></div></div>
    <div class="row kv" style="margin-top:-4px"><div style="opacity:.85">${SEED_TYPES.map(t=>`${t.name}: ${state.seed_stock[t.id]}`).join(" &nbsp;|&nbsp; ")}</div></div>
    <div class="row kv">${ICONS.seed.outerHTML}<div>Витграсс: <b>${state.grass}</b></div></div>
    <div class="row kv">${ICONS.juice.outerHTML}<div>Сок: <b>${state.juice}</b></div></div>
    <div class="row kv">${ICONS.lamp.outerHTML}<div>Ламп: <b>${state.lamps}</b></div></div>
    <div class="row kv">${ICONS.water.outerHTML}<div>Автополив: <b>${state.autowater?'есть':'нет'}</b></div></div>
    <div class="row kv">${ICONS.fert.outerHTML}<div>Удобрение: <b>${state.fert}</b></div></div>
  `;
  const toolNames={[TOOL_SEED]:"Семена (1)",[TOOL_WATER]:"Лейка (2)",[TOOL_HARVEST]:"Ножницы (3)",[TOOL_FERT]:"Удобрение (4)"};
  const toolIcons={[TOOL_SEED]:"seed",[TOOL_WATER]:"water",[TOOL_HARVEST]:"scissors",[TOOL_FERT]:"fert"};
  const ico=ICONS[toolIcons[activeTool]].cloneNode(true); toolIco.replaceWith(ico); ico.id="tool-ico";
  toolName.textContent=toolNames[activeTool];

  if(rebuildChips){
    seedSel.innerHTML="";
    SEED_TYPES.forEach((t,i)=>{
      const chip=document.createElement("div");
      chip.className="chip"+(i===activeSeedIdx?" active":"");
      chip.textContent=`${t.name} [${state.seed_stock[t.id]}]`;
      chip.addEventListener("click",()=>{ activeSeedIdx=i; refreshSidebar(false); });
      seedSel.appendChild(chip);
    });
  }else{
    [...seedSel.children].forEach((chip,i)=>{
      chip.classList.toggle("active", i===activeSeedIdx);
      chip.textContent=`${SEED_TYPES[i].name} [${state.seed_stock[SEED_TYPES[i].id]}]`;
    });
  }

  shopDiv.innerHTML="";
  function button(label,icon,fn){ const b=document.createElement("button"); b.className="btn"; b.appendChild(ICONS[icon].cloneNode(true)); b.append(" "+label); b.addEventListener("click",fn); shopDiv.appendChild(b); }
  for(const t of SEED_TYPES){
    button(`Купить семена: ${t.name} (+${t.pack}) — ${t.price}`,"seed",()=>{
      if(state.coins>=t.price){ state.coins-=t.price; state.seed_stock[t.id]+=t.pack; SFX.buy(); refreshSidebar(false); }
      else SFX.err();
    });
  }
  button(`Сделать сок (−1 трава, +1)`,"juice",()=>{ if(state.grass>=1){ state.grass--; state.juice++; SFX.buy(); refreshSidebar(false);} else SFX.err(); });
  button(`Продать сок (+${JUICE_PRICE} мон.)`,"coin",()=>{
    if(state.juice>=1){ state.juice--; state.coins+=JUICE_PRICE; state.stats.sell_juice=(state.stats.sell_juice||0)+1; questEvent(state,"sell_juice"); SFX.buy(); refreshSidebar(false); }
    else SFX.err();
  });
  button(`Купить лампу (+10%) — ${LAMP_PRICE}`,"lamp",()=>{ if(state.coins>=LAMP_PRICE){ state.coins-=LAMP_PRICE; state.lamps++; SFX.buy(); refreshSidebar(false);} else SFX.err(); });
  button(`Купить удобрение (+1) — 12`,"fert",()=>{ if(state.coins>=12){ state.coins-=12; state.fert++; SFX.buy(); refreshSidebar(false);} else SFX.err(); });
  button(`Автополив — ${state.autowater?"УЖЕ ЕСТЬ":"120 мон."}`,"water",()=>{ if(state.autowater) SFX.err(); else if(state.coins>=AUTOWATER_PRICE){ state.coins-=AUTOWATER_PRICE; state.autowater=true; SFX.buy(); refreshSidebar(false);} else SFX.err(); });
  button(`Сохранить (S) / Загрузить (L)`,"save",()=>{ document.title="S — сохранить, L — загрузить"; setTimeout(()=>document.title="Витграсс-ферма (HTML)",1100); });
  button(`Новая игра (R)`,"reset",()=>{ resetGame(); refreshSidebar(true); });

  questsDiv.innerHTML="";
  for(const q of state.quests){
    const el=document.createElement("div"); el.className="q "+(q.claimed?"done":"");
    el.textContent=`• ${q.name} — ${q.done}/${q.need} (+${q.reward} мон.)${q.claimed?" ✓":""}`; questsDiv.appendChild(el);
  }
  qdateDiv.textContent=`Обновление: ${state.quests_date}`;
}

/* ---------- init ---------- */
window.addEventListener("resize", resizeCanvas);
["pointerdown","keydown"].forEach(ev=>window.addEventListener(ev,ensureAudio,{once:true}));

resizeCanvas();
loadState();         // ← сперва загрузка
refreshSidebar(true); // затем UI
requestAnimationFrame(loop);
window.addEventListener("beforeunload", saveState);
</script>
</body>
</html>
